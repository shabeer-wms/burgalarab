import React, { useState } from 'react';
import { useApp } from '../../context/AppContext';
import { useAuth } from '../../context/AuthContext';
import { Order, Bill } from '../../types';
import { Receipt, Download, Printer, CreditCard, Banknote, Smartphone, Globe } from 'lucide-react';

const BillingPayments: React.FC = () => {
  const { orders, bills, generateBill, getTodaysRevenue } = useApp();
  const { user } = useAuth();
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [paymentMethod, setPaymentMethod] = useState<Bill['paymentMethod']>('cash');
  const [showBillPreview, setShowBillPreview] = useState<Bill | null>(null);

  const readyOrders = orders.filter(order => 
    order.status === 'ready' && order.paymentStatus === 'pending'
  );

  const todaysRevenue = getTodaysRevenue();

  const handleGenerateBill = () => {
    if (!selectedOrder || !user) return;

    try {
      const bill = generateBill(selectedOrder.id, user.name, paymentMethod);
      setShowBillPreview(bill);
      setSelectedOrder(null);
    } catch (error) {
      alert('Error generating bill');
    }
  };

  const downloadBillPDF = (bill: Bill) => {
    // In a real app, this would generate and download a PDF
    const billContent = generateBillHTML(bill);
    const blob = new Blob([billContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `bill-${bill.id}.html`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const printBill = (bill: Bill) => {
    const billContent = generateBillHTML(bill);
    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(billContent);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const generateBillHTML = (bill: Bill) => {
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Bill - ${bill.id}</title>
        <style>
          body { font-family: Arial, sans-serif; max-width: 400px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; border-bottom: 2px solid #000; padding-bottom: 10px; margin-bottom: 20px; }
          .item { display: flex; justify-content: space-between; margin-bottom: 5px; }
          .total { border-top: 1px solid #000; padding-top: 10px; margin-top: 10px; font-weight: bold; }
          .footer { text-align: center; margin-top: 20px; font-size: 12px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h2>Hotel Management</h2>
          <p>Bill No: ${bill.id}</p>
          <p>Date: ${bill.generatedAt.toLocaleDateString()}</p>
          <p>Time: ${bill.generatedAt.toLocaleTimeString()}</p>
        </div>
        
        <div>
          <p><strong>Customer:</strong> ${bill.customerDetails.name}</p>
          <p><strong>Phone:</strong> ${bill.customerDetails.phone}</p>
          ${bill.customerDetails.tableNumber ? `<p><strong>Table:</strong> ${bill.customerDetails.tableNumber}</p>` : ''}
          ${bill.customerDetails.address ? `<p><strong>Address:</strong> ${bill.customerDetails.address}</p>` : ''}
        </div>
        
        <div style="margin: 20px 0;">
          ${bill.items.map(item => `
            <div class="item">
              <span>${item.quantity}x ${item.menuItem.name}</span>
              <span>$${(item.menuItem.price * item.quantity).toFixed(2)}</span>
            </div>
          `).join('')}
        </div>
        
        <div class="total">
          <div class="item">
            <span>Subtotal:</span>
            <span>$${bill.subtotal.toFixed(2)}</span>
          </div>
          ${bill.serviceCharge ? `
            <div class="item">
              <span>Service Charge (10%):</span>
              <span>$${bill.serviceCharge.toFixed(2)}</span>
            </div>
          ` : ''}
          <div class="item">
            <span>Tax (${(bill.taxRate * 100).toFixed(0)}%):</span>
            <span>$${bill.taxAmount.toFixed(2)}</span>
          </div>
          <div class="item" style="font-size: 18px;">
            <span>Total:</span>
            <span>$${bill.total.toFixed(2)}</span>
          </div>
          <div class="item">
            <span>Payment Method:</span>
            <span>${bill.paymentMethod.toUpperCase()}</span>
          </div>
        </div>
        
        <div class="footer">
          <p>Thank you for your visit!</p>
          <p>Generated by: ${bill.generatedBy}</p>
        </div>
      </body>
      </html>
    `;
  };

  const getPaymentIcon = (method: Bill['paymentMethod']) => {
    switch (method) {
      case 'cash': return <Banknote className="w-4 h-4" />;
      case 'card': return <CreditCard className="w-4 h-4" />;
      case 'upi': return <Smartphone className="w-4 h-4" />;
      case 'online': return <Globe className="w-4 h-4" />;
      default: return <Banknote className="w-4 h-4" />;
    }
  };

  return (
    <div className="space-y-6">
      {/* Revenue Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="card text-center">
          <div className="text-title-large text-success-600">${todaysRevenue.toFixed(2)}</div>
          <div className="text-body-medium text-surface-600">Today's Revenue</div>
        </div>
        <div className="card text-center">
          <div className="text-title-large text-primary-600">{readyOrders.length}</div>
          <div className="text-body-medium text-surface-600">Ready for Billing</div>
        </div>
        <div className="card text-center">
          <div className="text-title-large text-surface-900">{bills.length}</div>
          <div className="text-body-medium text-surface-600">Bills Generated</div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Orders Ready for Billing */}
        <div className="space-y-4">
          <h2 className="text-title-large">Ready for Billing ({readyOrders.length})</h2>
          {readyOrders.length === 0 ? (
            <div className="card text-center py-8">
              <Receipt className="w-12 h-12 text-surface-300 mx-auto mb-4" />
              <p className="text-surface-600">No orders ready for billing</p>
            </div>
          ) : (
            readyOrders.map(order => (
              <div 
                key={order.id} 
                className={`card cursor-pointer transition-all duration-200 hover:shadow-elevation-3 ${
                  selectedOrder?.id === order.id ? 'ring-2 ring-primary-500' : ''
                }`}
                onClick={() => setSelectedOrder(order)}
              >
                <div className="flex items-start justify-between mb-3">
                  <div>
                    <h3 className="text-title-medium">#{order.id.slice(-6)}</h3>
                    <p className="text-body-medium text-surface-600">
                      {order.customerName}
                      {order.tableNumber && ` • Table ${order.tableNumber}`}
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="text-title-medium">${order.grandTotal.toFixed(2)}</div>
                    <div className="chip chip-success text-xs">Ready</div>
                  </div>
                </div>
                
                <div className="space-y-1">
                  {order.items.slice(0, 2).map(item => (
                    <div key={item.id} className="flex justify-between text-body-small">
                      <span>{item.quantity}x {item.menuItem.name}</span>
                      <span>${(item.menuItem.price * item.quantity).toFixed(2)}</span>
                    </div>
                  ))}
                  {order.items.length > 2 && (
                    <p className="text-body-small text-surface-600">
                      +{order.items.length - 2} more items
                    </p>
                  )}
                </div>
              </div>
            ))
          )}
        </div>

        {/* Billing Panel */}
        <div className="sticky top-6">
          {selectedOrder ? (
            <div className="space-y-4">
              {/* Bill Details */}
              <div className="card">
                <h3 className="text-title-large mb-4">Generate Bill</h3>
                
                <div className="space-y-4">
                  <div>
                    <h4 className="text-title-medium mb-2">Order #{selectedOrder.id.slice(-6)}</h4>
                    <p className="text-body-medium text-surface-600">
                      {selectedOrder.customerName} • {selectedOrder.customerPhone}
                    </p>
                    {selectedOrder.tableNumber && (
                      <p className="text-body-medium text-surface-600">Table {selectedOrder.tableNumber}</p>
                    )}
                  </div>

                  {/* Items */}
                  <div>
                    <h4 className="text-title-medium mb-2">Items</h4>
                    <div className="space-y-2">
                      {selectedOrder.items.map(item => (
                        <div key={item.id} className="flex justify-between text-body-medium">
                          <span>{item.quantity}x {item.menuItem.name}</span>
                          <span>${(item.menuItem.price * item.quantity).toFixed(2)}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Bill Calculation */}
                  <div className="border-t border-surface-200 pt-4 space-y-2">
                    <div className="flex justify-between">
                      <span>Subtotal:</span>
                      <span>${selectedOrder.total.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Service Charge (10%):</span>
                      <span>${(selectedOrder.total * 0.1).toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tax (18%):</span>
                      <span>${selectedOrder.tax.toFixed(2)}</span>
                    </div>
                    <div className="border-t border-surface-200 pt-2 flex justify-between font-medium text-title-medium">
                      <span>Total:</span>
                      <span>${(selectedOrder.total + (selectedOrder.total * 0.1) + selectedOrder.tax).toFixed(2)}</span>
                    </div>
                  </div>

                  {/* Payment Method */}
                  <div>
                    <h4 className="text-title-medium mb-3">Payment Method</h4>
                    <div className="grid grid-cols-2 gap-2">
                      {(['cash', 'card', 'upi', 'online'] as Bill['paymentMethod'][]).map(method => (
                        <button
                          key={method}
                          onClick={() => setPaymentMethod(method)}
                          className={`flex items-center justify-center space-x-2 p-3 rounded-lg border transition-colors ${
                            paymentMethod === method
                              ? 'border-primary-500 bg-primary-50 text-primary-700'
                              : 'border-surface-300 hover:bg-surface-50'
                          }`}
                        >
                          {getPaymentIcon(method)}
                          <span className="capitalize">{method}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  <button
                    onClick={handleGenerateBill}
                    className="w-full btn-primary flex items-center justify-center space-x-2"
                  >
                    <Receipt className="w-4 h-4" />
                    <span>Generate Bill & Process Payment</span>
                  </button>
                </div>
              </div>
            </div>
          ) : (
            <div className="card text-center py-12">
              <Receipt className="w-12 h-12 text-surface-300 mx-auto mb-4" />
              <p className="text-surface-600">Select an order to generate bill</p>
            </div>
          )}
        </div>
      </div>

      {/* Recent Bills */}
      <div className="card">
        <h3 className="text-title-large mb-4">Recent Bills ({bills.length})</h3>
        {bills.length === 0 ? (
          <p className="text-surface-600 text-center py-8">No bills generated yet</p>
        ) : (
          <div className="space-y-3">
            {bills.slice(-10).reverse().map(bill => (
              <div key={bill.id} className="flex items-center justify-between p-4 bg-surface-50 rounded-lg">
                <div>
                  <p className="text-body-medium font-medium">{bill.id}</p>
                  <p className="text-body-small text-surface-600">
                    {bill.customerDetails.name} • {bill.generatedAt.toLocaleDateString()}
                  </p>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="text-right">
                    <p className="text-body-medium font-medium">${bill.total.toFixed(2)}</p>
                    <div className="flex items-center space-x-1 text-body-small text-surface-600">
                      {getPaymentIcon(bill.paymentMethod)}
                      <span className="capitalize">{bill.paymentMethod}</span>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => downloadBillPDF(bill)}
                      className="p-2 hover:bg-surface-200 rounded-lg"
                      title="Download PDF"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                    <button
                      onClick={() => printBill(bill)}
                      className="p-2 hover:bg-surface-200 rounded-lg"
                      title="Print"
                    >
                      <Printer className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* Bill Preview Modal */}
      {showBillPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-xl p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-title-large">Bill Generated Successfully</h3>
              <button
                onClick={() => setShowBillPreview(null)}
                className="p-2 hover:bg-surface-100 rounded-lg"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              <div className="text-center p-4 bg-success-50 border border-success-200 rounded-lg">
                <Receipt className="w-8 h-8 text-success-600 mx-auto mb-2" />
                <p className="text-success-800 font-medium">Payment Processed Successfully</p>
                <p className="text-success-700">Bill ID: {showBillPreview.id}</p>
              </div>
              
              <div className="flex space-x-2">
                <button
                  onClick={() => downloadBillPDF(showBillPreview)}
                  className="flex-1 btn-outlined flex items-center justify-center space-x-2"
                >
                  <Download className="w-4 h-4" />
                  <span>Download</span>
                </button>
                <button
                  onClick={() => printBill(showBillPreview)}
                  className="flex-1 btn-primary flex items-center justify-center space-x-2"
                >
                  <Printer className="w-4 h-4" />
                  <span>Print</span>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default BillingPayments;
